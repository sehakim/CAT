<PsychoPy2experiment version="1.82.01" encoding="utf-8">
  <Settings>
    <Param name="Show mouse" val="True" valType="bool" updates="None"/>
    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['Subject_ID'], expName, expInfo['date'])" valType="code" updates="None"/>
    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>
    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>
    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>
    <Param name="Window size (pixels)" val="[1920, 1080]" valType="code" updates="None"/>
    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>
    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>
    <Param name="Experiment info" val="{u'Subject_ID': u'', u'Session_Number': u'', u'Boolean_Complexity': u''}" valType="code" updates="None"/>
    <Param name="Save csv file" val="False" valType="bool" updates="None"/>
    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>
    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>
    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>
    <Param name="expName" val="Categorization" valType="str" updates="None"/>
    <Param name="logging level" val="data" valType="code" updates="None"/>
    <Param name="blendMode" val="avg" valType="str" updates="None"/>
    <Param name="Save excel file" val="True" valType="bool" updates="None"/>
    <Param name="Units" val="use prefs" valType="str" updates="None"/>
    <Param name="Save log file" val="True" valType="bool" updates="None"/>
    <Param name="Screen" val="1" valType="num" updates="None"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="probStCode">
        <Param name="Begin Experiment" val="#--import the required packages.&#10;from openpyxl import load_workbook&#10;import random&#10;&#10;#--trialOrder will help track the order in which &#10;#--the categorization problems are chosen.&#10;dirty = 1&#10;&#10;#--The follwing lines of code generate the different (shape,color,number) combinations for the test cases.&#10;iniTrials = range(1, 12, 2) #--total number of samples possible&#10;trialOrder = random.sample(iniTrials, 3) #--Selects 3 random test cases from the total list.&#10;exttrialOrder = [x + 1 for x in trialOrder]#--the enfored test cases based on the test cases selected above.&#10;[trialOrder.append(x) for x in exttrialOrder]#--this list contains all the test cases that will be used.&#10;shuffle(trialOrder) #this makes the order of test cases random&#10;#print trialOrder&#10;#--The Code maintains every element as a object of type Stimulus.&#10;#--Each object will have a distinct combination of Shape, Color, Number and parity.&#10;#--Every repeat will have a different combination of objects with random and distinct property assignment.&#10;class Stimulus:&#10;    #--x,y,z will have random assignment of shape, color and number.&#10;    #--the random value assignment can be interpreted from the value in assign&#10;    #--inCat gives the category of the stimuli object&#10;    #--par gives the parity value&#10;    def __init__(self, x, y, z, inCat, par, assign):&#10;        if assign &lt;= 2: #-- x=shape y=number z=color&#10;            self.s = x&#10;            self.n = y&#10;            self.c = z&#10;            self.cat = inCat&#10;            self.p = par&#10;        elif assign &lt;= 4: #-- x=shape y=color z=number&#10;            self.s = x&#10;            self.n = z&#10;            self.c = y&#10;            self.cat = inCat&#10;            self.p = par&#10;        elif assign &lt;= 6: #-- x=number y=shape z=color&#10;            self.s = y&#10;            self.n = x&#10;            self.c = z&#10;            self.cat = inCat&#10;            self.p = par&#10;        elif assign &lt;= 8: #-- x=number y=color z=shape&#10;            self.s = z&#10;            self.n = x&#10;            self.c = y&#10;            self.cat = inCat&#10;            self.p = par&#10;        elif assign &lt;= 10: #-- x=color y=number z=shape&#10;            self.s = z&#10;            self.n = y&#10;            self.c = x&#10;            self.cat = inCat&#10;            self.p = par&#10;        else: #-- x=color y=shape z=number&#10;            self.s = y&#10;            self.n = z&#10;            self.c = x&#10;            self.cat = inCat&#10;            self.p = par&#10;&#10;" valType="extendedCode" updates="constant"/>
        <Param name="name" val="probStCode" valType="code" updates="None"/>
        <Param name="Begin Routine" val="#---The following code the main implementation of ths Experiment&#10;&#10;#--This part extracts parameter values which are defined using the buider mode.&#10;assignOrder = trialOrder[repeat.thisN] #-Helps decide the random order to be used on this repeat.&#10;BComp = expInfo['Boolean_Complexity'] #-Gets the Boolean complexity given by the test taker at the begining of the experiment.&#10;&#10;#--This part intiializes variable value which have to consistent throughout the experiment.&#10;ovalSize = [0.2, 0.15]&#10;#shpSize = &#10;stmdepth = -20.0&#10;assignTrack    = []&#10;&#10;fshape      = ['square', 'triangle']&#10;fnumber     = ['2','1']&#10;fstcolor    = ['black', 'white']&#10;finCat      = ['0','1']&#10;fparity     = 1&#10;&#10;#--This part creates the randomization of the property value assignment.&#10;shuffle(fshape)&#10;shuffle(fnumber)&#10;shuffle(fstcolor)&#10;shuffle(finCat)&#10;&#10;#--The Shape, Color and Number Properties will be randomly assigned to a, b and c.&#10;#--a,b and c will be used instead of property lists above while creating the parity clusters.&#10;#--Use of a, b and c will allow us to use a standard formula type approach to create the clusters&#10;#-- while maintining the need for random use of properties to give the desired Boolean Complexity.&#10;a = [None, None]&#10;b = [None, None]&#10;c = [None, None]&#10;&#10;#--The Following part will randomly assign &#10;#-- the property lists of Shape, Color and Number to lists a, b and c.&#10;#-- while allowing us to track the assignemnts.&#10;#--variable assignOrder is used for this purpose.&#10;#-- Note: This method is usable only because we have small number of possible random assignments. &#10;#--       If the number of Randomizations have increased and tracking has become more complex I recommend using a new method to do this.&#10;&#10;#--This Part is used to perform the random assignment of the properties to a, b, and c.&#10;if assignOrder == 1:&#10;    a = fshape&#10;    b = fnumber&#10;    c = fstcolor&#10;    finCat = ['0','1']&#10;    fparity = 1&#10;    assignOrder = 1&#10;elif assignOrder == 2:&#10;    a = fshape&#10;    b = fnumber&#10;    c = fstcolor&#10;    finCat = ['1','0']&#10;    fparity = 0&#10;    assignOrder = 2&#10;elif assignOrder == 3:&#10;    a = fshape&#10;    b = fstcolor&#10;    c = fnumber&#10;    finCat = ['0','1']&#10;    fparity = 1&#10;    assignOrder = 3&#10;elif assignOrder == 4:&#10;    a = fshape&#10;    b = fstcolor&#10;    c = fnumber&#10;    finCat = ['1','0']&#10;    fparity = 0&#10;    assignOrder = 4&#10;elif assignOrder == 5:&#10;    a = fnumber&#10;    b = fshape&#10;    c = fstcolor&#10;    finCat = ['0','1']&#10;    fparity = 1&#10;    assignOrder = 5&#10;elif assignOrder == 6:&#10;    a = fnumber&#10;    b = fshape&#10;    c = fstcolor&#10;    finCat = ['1','0']&#10;    fparity = 0&#10;    assignOrder = 6&#10;elif assignOrder == 7:&#10;    a = fnumber&#10;    b = fstcolor&#10;    c = fshape&#10;    finCat = ['0','1']&#10;    fparity = 1&#10;    assignOrder = 7&#10;elif assignOrder == 8:&#10;    a = fnumber&#10;    b = fstcolor&#10;    c = fshape&#10;    finCat = ['1','0']&#10;    fparity = 0&#10;    assignOrder = 8&#10;elif assignOrder == 9:&#10;    a = fstcolor&#10;    b = fnumber&#10;    c = fshape&#10;    finCat = ['0','1']&#10;    fparity = 1&#10;    assignOrder = 9&#10;elif assignOrder == 10:&#10;    a = fstcolor&#10;    b = fnumber&#10;    c = fshape&#10;    finCat = ['1','0']&#10;    fparity = 0&#10;    assignOrder = 10&#10;elif assignOrder == 11:&#10;    a = fstcolor&#10;    b = fshape&#10;    c = fnumber&#10;    finCat = ['0','1']&#10;    fparity = 1&#10;    assignOrder = 11&#10;else:&#10;    a = fstcolor&#10;    b = fshape&#10;    c = fnumber&#10;    finCat = ['1','0']&#10;    fparity = 0&#10;    assignOrder = 12&#10;&#10;#--This part will create the stimuli objects with discrete property value combinations.&#10;stimuli = [] #-- we will use this list to perform the operations commons to all the stimuli objects.&#10;&#10;if BComp == '2': #---Assignment for Boolean Complexity 2&#10;    stimuli.append(Stimulus(a[1], b[1], c[1], finCat[1], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[1], c[0], finCat[1], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[0], c[0], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[0], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[1], c[0], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[1], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[0], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[0], c[0], finCat[0], fparity, assignOrder))&#10;&#10;if BComp == '5': #---Assignment for Boolean Complexity 5&#10;    stimuli.append(Stimulus(a[1], b[1], c[1], finCat[1], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[0], c[0], finCat[1], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[0], c[0], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[0], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[1], c[0], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[1], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[0], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[1], c[0], finCat[0], fparity, assignOrder))&#10;&#10;if BComp == '6': #---Assignment for Boolean Complexity 6&#10;    stimuli.append(Stimulus(a[1], b[1], c[1], finCat[1], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[0], c[0], finCat[1], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[1], c[0], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[0], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[1], c[0], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[0], b[1], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[0], c[1], finCat[0], fparity, assignOrder))&#10;    stimuli.append(Stimulus(a[1], b[0], c[0], finCat[0], fparity, assignOrder))&#10;&#10;#--Here we right the stimuli element property values to 'stimuliList.xlsx'&#10;#--This excel file will be used as input during testing.&#10;r = 1&#10;shuffle(stimuli)&#10;for stm in stimuli:&#10;    wb = load_workbook(filename = 'stimuliList.xlsx')&#10;    ws = wb.get_sheet_by_name(&quot;Sheet1&quot;)&#10;    &#10;    ws.cell(row=r,column=0).value = stm.s #--shape value&#10;    ws.cell(row=r,column=1).value = stm.n #--number value&#10;    ws.cell(row=r,column=2).value = stm.c #--color value&#10;    ws.cell(row=r,column=3).value = stm.cat #--category assignment value&#10;    if stm.cat == '1':&#10;        ws.cell(row=r,column=4).value = 'z' #--correct answer key value assignment&#10;    else:&#10;        ws.cell(row=r,column=4).value = 'm' #--correct answer key value assignment&#10;    ws.cell(row=r,column=5).value = stm.p #--parity value assignment.&#10;    wb.save('stimuliList.xlsx')&#10;    r = r+1 #--incrementing r value so that next set of vaues can be written to the next line in the excel file.&#10;&#10;#--Displaying the Stimuli as 'in category' or 'not in category'&#10;#--the following variables will be used in displaying the stimuli&#10;stimuliList = []&#10;stmNum = -1&#10;#--In Category stimuli position variables&#10;inX = -0.375&#10;inY = 0.375&#10;#--Not In Category stimuli position variables&#10;outX = -0.375&#10;outY = -0.125&#10;&#10;shuffle(stimuli)&#10;&#10;#---Creating Stimuli-1&#10;#--This Part decides the positioning of the stimuli based on its parity&#10;stmNum  = stmNum+1&#10;#--Assinging the center point for the stimuli. &#10;if stimuli[stmNum].cat == '1':&#10;    if inX &gt; 0.5:&#10;        inX = -0.375&#10;        inY = 0.125&#10;    posX = inX&#10;    inX = inX+0.25&#10;    posY = inY&#10;else:&#10;    if outX &gt; 0.5:&#10;        outX = -0.375&#10;        outY = -0.375&#10;    posX = outX&#10;    outX = outX+0.25&#10;    posY = outY&#10;#--Drawing The Oval&#10;oval1 = visual.Polygon(win=win,&#10;    edges = 100, size=ovalSize,&#10;    ori=0, pos=[posX, posY],&#10;    lineWidth=3, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;    fillColor=[1,1,1], fillColorSpace='rgb',&#10;    opacity=1,depth=stmdepth+1.0, &#10;    interpolate=True)&#10;oval1.setAutoDraw(True, log=None)&#10;stimuliList.append(oval1)&#10;#--This part Creates the shapes &#10;#--This part draws triangles&#10;if stimuli[stmNum].s == 'triangle':&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp11 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;            pos=[posX-0.04, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;            ori = 0, depth=stmdepth)&#10;        shp11.tStart = t&#10;        shp11.frameNStart = frameN&#10;        shp11.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp11)&#10;&#10;    shp12 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;        pos=[posX, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;        ori = 0, depth=stmdepth)&#10;    shp12.tStart = t&#10;    shp12.frameNStart = frameN&#10;    shp12.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp12)&#10;&#10;else:&#10;#--This part draws squares&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp11 = visual.Rect(win=win,&#10;            width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;            ori=0, pos=[posX-0.04, posY],&#10;            lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;            fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;            opacity=1,depth=stmdepth, &#10;            interpolate=True)&#10;        shp11.tStart = t&#10;        shp11.frameNStart = frameN&#10;        shp11.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp11)&#10;&#10;    shp12 = visual.Rect(win=win,&#10;        width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;        ori=0, pos=[posX, posY],&#10;        lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;        fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;        opacity=1,depth=stmdepth, &#10;        interpolate=True)&#10;    shp12.tStart = t&#10;    shp12.frameNStart = frameN&#10;    shp12.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp12)&#10;&#10;#---creating Stimuli-2&#10;#--This Part decides the positioning of the stimuli based on its parity&#10;stmNum  = stmNum+1&#10;#--Assinging the center point for the stimuli.&#10;if stimuli[stmNum].cat == '1':&#10;    if inX &gt; 0.5:&#10;        inX = -0.375&#10;        inY = 0.125&#10;    posX = inX&#10;    inX = inX+0.25&#10;    posY = inY&#10;else:&#10;    if outX &gt; 0.5:&#10;        outX = -0.375&#10;        outY = -0.375&#10;    posX = outX&#10;    outX = outX+0.25&#10;    posY = outY&#10;#--This draws the oval.&#10;oval2 = visual.Polygon(win=win,&#10;    edges = 100, size=ovalSize,&#10;    ori=0, pos=[posX, posY],&#10;    lineWidth=3, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;    fillColor=[1,1,1], fillColorSpace='rgb',&#10;    opacity=1,depth=stmdepth+1.0, &#10;    interpolate=True)&#10;oval2.setAutoDraw(True, log=None)&#10;stimuliList.append(oval2)&#10;#--This part creates the triangles&#10;if stimuli[stmNum].s == 'triangle':&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp21 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;            pos=[posX-0.04, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;            ori = 0, depth=stmdepth)&#10;        shp21.tStart = t&#10;        shp21.frameNStart = frameN&#10;        shp21.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp21)&#10;&#10;    shp22 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;        pos=[posX, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;        ori = 0, depth=stmdepth)&#10;    shp22.tStart = t&#10;    shp22.frameNStart = frameN&#10;    shp22.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp22)&#10;&#10;else:&#10;#--This part creates the sqaures.&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp21 = visual.Rect(win=win,&#10;            width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;            ori=0, pos=[posX-0.04, posY],&#10;            lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;            fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;            opacity=1,depth=stmdepth, &#10;            interpolate=True)&#10;        shp21.tStart = t&#10;        shp21.frameNStart = frameN&#10;        shp21.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp21)&#10;&#10;    shp22 = visual.Rect(win=win,&#10;        width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;        ori=0, pos=[posX, posY],&#10;        lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;        fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;        opacity=1,depth=stmdepth, &#10;        interpolate=True)&#10;    shp22.tStart = t&#10;    shp22.frameNStart = frameN&#10;    shp22.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp22)&#10;&#10;#   creating Stimuli-3&#10;#This Part decides the positioning of the stimuli based on its parity&#10;stmNum  = stmNum+1&#10;#--Assinging the center point for the stimuli.&#10;if stimuli[stmNum].cat == '1':&#10;    if inX &gt; 0.5:&#10;        inX = -0.375&#10;        inY = 0.125&#10;    posX = inX&#10;    inX = inX+0.25&#10;    posY = inY&#10;else:&#10;    if outX &gt; 0.5:&#10;        outX = -0.375&#10;        outY = -0.375&#10;    posX = outX&#10;    outX = outX+0.25&#10;    posY = outY&#10;#--This draws the ovals&#10;oval3 = visual.Polygon(win=win,&#10;    edges = 100, size=ovalSize,&#10;    ori=0, pos=[posX, posY],&#10;    lineWidth=3, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;    fillColor=[1,1,1], fillColorSpace='rgb',&#10;    opacity=1,depth=stmdepth+1.0, &#10;    interpolate=True)&#10;oval3.setAutoDraw(True, log=None)&#10;stimuliList.append(oval3)&#10;#--This part draws the traiangle&#10;if stimuli[stmNum].s == 'triangle':&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp31 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;            pos=[posX-0.04, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;            ori = 0, depth=stmdepth)&#10;        shp31.tStart = t&#10;        shp31.frameNStart = frameN&#10;        shp31.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp31)&#10;&#10;    shp32 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;        pos=[posX, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;        ori = 0, depth=stmdepth)&#10;    shp32.tStart = t&#10;    shp32.frameNStart = frameN&#10;    shp32.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp32)&#10;&#10;else:&#10;#-- This part draws squares&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp31 = visual.Rect(win=win,&#10;            width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;            ori=0, pos=[posX-0.04, posY],&#10;            lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;            fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;            opacity=1,depth=stmdepth, &#10;            interpolate=True)&#10;        shp31.tStart = t&#10;        shp31.frameNStart = frameN&#10;        shp31.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp31)&#10;&#10;    shp32 = visual.Rect(win=win,&#10;        width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;        ori=0, pos=[posX, posY],&#10;        lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;        fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;        opacity=1,depth=stmdepth, &#10;        interpolate=True)&#10;    shp32.tStart = t&#10;    shp32.frameNStart = frameN&#10;    shp32.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp32)&#10;&#10;#   creating Stimuli-4&#10;#This Part decides the positioning of the stimuli based on its parity&#10;stmNum  = stmNum+1&#10;#--Assinging the center point for the stimuli.&#10;if stimuli[stmNum].cat == '1':&#10;    if inX &gt; 0.5:&#10;        inX = -0.375&#10;        inY = 0.125&#10;    posX = inX&#10;    inX = inX+0.25&#10;    posY = inY&#10;else:&#10;    if outX &gt; 0.5:&#10;        outX = -0.375&#10;        outY = -0.375&#10;    posX = outX&#10;    outX = outX+0.25&#10;    posY = outY&#10;#--This part draws the oval&#10;oval4 = visual.Polygon(win=win,&#10;    edges = 100, size=ovalSize,&#10;    ori=0, pos=[posX, posY],&#10;    lineWidth=3, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;    fillColor=[1,1,1], fillColorSpace='rgb',&#10;    opacity=1,depth=stmdepth+1.0, &#10;    interpolate=True)&#10;oval4.setAutoDraw(True, log=None)&#10;stimuliList.append(oval4)&#10;#--This part draws the triangle&#10;if stimuli[stmNum].s == 'triangle':&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp41 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;            pos=[posX-0.04, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;            ori = 0, depth=stmdepth)&#10;        shp41.tStart = t&#10;        shp41.frameNStart = frameN&#10;        shp41.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp41)&#10;&#10;    shp42 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;        pos=[posX, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;        ori = 0, depth=stmdepth)&#10;    shp42.tStart = t&#10;    shp42.frameNStart = frameN&#10;    shp42.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp42)&#10;&#10;else:&#10;#This Part draws the sqaures.&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp41 = visual.Rect(win=win,&#10;            width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;            ori=0, pos=[posX-0.04, posY],&#10;            lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;            fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;            opacity=1,depth=stmdepth, &#10;            interpolate=True)&#10;        shp41.tStart = t&#10;        shp41.frameNStart = frameN&#10;        shp41.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp41)&#10;&#10;    shp42 = visual.Rect(win=win,&#10;        width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;        ori=0, pos=[posX, posY],&#10;        lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;        fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;        opacity=1,depth=stmdepth, &#10;        interpolate=True)&#10;    shp42.tStart = t&#10;    shp42.frameNStart = frameN&#10;    shp42.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp42)&#10;&#10;#--creating Stimuli-5&#10;#--This Part decides the positioning of the stimuli based on its parity&#10;stmNum  = stmNum+1&#10;#--Assinging the center point for the stimuli.&#10;if stimuli[stmNum].cat == '1':&#10;    if inX &gt; 0.5:&#10;        inX = -0.375&#10;        inY = 0.125&#10;    posX = inX&#10;    inX = inX+0.25&#10;    posY = inY&#10;else:&#10;    if outX &gt; 0.5:&#10;        outX = -0.375&#10;        outY = -0.375&#10;    posX = outX&#10;    outX = outX+0.25&#10;    posY = outY&#10;#--This part draws the oval&#10;oval5 = visual.Polygon(win=win,&#10;    edges = 100, size=ovalSize,&#10;    ori=0, pos=[posX, posY],&#10;    lineWidth=3, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;    fillColor=[1,1,1], fillColorSpace='rgb',&#10;    opacity=1,depth=stmdepth+1.0, &#10;    interpolate=True)&#10;oval5.setAutoDraw(True, log=None)&#10;stimuliList.append(oval5)&#10;#--This part draws the Triangle&#10;if stimuli[stmNum].s == 'triangle':&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp51 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;            pos=[posX-0.04, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;            ori = 0, depth=stmdepth)&#10;        shp51.tStart = t&#10;        shp51.frameNStart = frameN&#10;        shp51.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp51)&#10;&#10;    shp52 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;        pos=[posX, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;        ori = 0, depth=stmdepth)&#10;    shp52.tStart = t&#10;    shp52.frameNStart = frameN&#10;    shp52.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp52)&#10;&#10;else:&#10;#--This part draws the sqaures&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp51 = visual.Rect(win=win,&#10;            width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;            ori=0, pos=[posX-0.04, posY],&#10;            lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;            fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;            opacity=1,depth=stmdepth, &#10;            interpolate=True)&#10;        shp51.tStart = t&#10;        shp51.frameNStart = frameN&#10;        shp51.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp51)&#10;&#10;    shp52 = visual.Rect(win=win,&#10;        width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;        ori=0, pos=[posX, posY],&#10;        lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;        fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;        opacity=1,depth=stmdepth, &#10;        interpolate=True)&#10;    shp52.tStart = t&#10;    shp52.frameNStart = frameN&#10;    shp52.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp52)&#10;&#10;#   creating Stimuli-6&#10;#This Part decides the positioning of the stimuli based on its parity&#10;stmNum  = stmNum+1&#10;#--Assinging the center point for the stimuli.&#10;if stimuli[stmNum].cat == '1':&#10;    if inX &gt; 0.5:&#10;        inX = -0.375&#10;        inY = 0.125&#10;    posX = inX&#10;    inX = inX+0.25&#10;    posY = inY&#10;else:&#10;    if outX &gt; 0.5:&#10;        outX = -0.375&#10;        outY = -0.375&#10;    posX = outX&#10;    outX = outX+0.25&#10;    posY = outY&#10;#--This part draws the Oval&#10;oval6 = visual.Polygon(win=win,&#10;    edges = 100, size=ovalSize,&#10;    ori=0, pos=[posX, posY],&#10;    lineWidth=3, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;    fillColor=[1,1,1], fillColorSpace='rgb',&#10;    opacity=1,depth=stmdepth+1.0, &#10;    interpolate=True)&#10;oval6.setAutoDraw(True, log=None)&#10;stimuliList.append(oval6)&#10;#--This part draws the Triangles&#10;if stimuli[stmNum].s == 'triangle':&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp61 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;            pos=[posX-0.04, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;            ori = 0, depth=stmdepth)&#10;        shp61.tStart = t&#10;        shp61.frameNStart = frameN&#10;        shp61.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp61)&#10;&#10;    shp62 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;        pos=[posX, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;        ori = 0, depth=stmdepth)&#10;    shp62.tStart = t&#10;    shp62.frameNStart = frameN&#10;    shp62.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp62)&#10;&#10;else:&#10;#--This part draws the squares&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp61 = visual.Rect(win=win,&#10;            width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;            ori=0, pos=[posX-0.04, posY],&#10;            lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;            fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;            opacity=1,depth=stmdepth, &#10;            interpolate=True)&#10;        shp61.tStart = t&#10;        shp61.frameNStart = frameN&#10;        shp61.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp61)&#10;&#10;    shp62 = visual.Rect(win=win,&#10;        width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;        ori=0, pos=[posX, posY],&#10;        lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;        fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;        opacity=1,depth=stmdepth, &#10;        interpolate=True)&#10;    shp62.tStart = t&#10;    shp62.frameNStart = frameN&#10;    shp62.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp62)&#10;&#10;#   creating Stimuli-7&#10;#This Part decides the positioning of the stimuli based on its parity&#10;stmNum  = stmNum+1&#10;#--Assinging the center point for the stimuli.&#10;if stimuli[stmNum].cat == '1':&#10;    if inX &gt; 0.5:&#10;        inX = -0.375&#10;        inY = 0.125&#10;    posX = inX&#10;    inX = inX+0.25&#10;    posY = inY&#10;else:&#10;    if outX &gt; 0.5:&#10;        outX = -0.375&#10;        outY = -0.375&#10;    posX = outX&#10;    outX = outX+0.25&#10;    posY = outY&#10;#--This part draws the Ovals&#10;oval7 = visual.Polygon(win=win,&#10;    edges = 100, size=ovalSize,&#10;    ori=0, pos=[posX, posY],&#10;    lineWidth=3, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;    fillColor=[1,1,1], fillColorSpace='rgb',&#10;    opacity=1,depth=stmdepth+1.0, &#10;    interpolate=True)&#10;oval7.setAutoDraw(True, log=None)&#10;stimuliList.append(oval7)&#10;#--This part draws the Triangles&#10;if stimuli[stmNum].s == 'triangle':&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp71 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;            pos=[posX-0.04, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;            ori = 0, depth=stmdepth)&#10;        shp71.tStart = t&#10;        shp71.frameNStart = frameN&#10;        shp71.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp71)&#10;&#10;    shp72 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;        pos=[posX, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;        ori = 0, depth=stmdepth)&#10;    shp72.tStart = t&#10;    shp72.frameNStart = frameN&#10;    shp72.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp72)&#10;&#10;else:&#10;#--This part draws the sqaures&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp71 = visual.Rect(win=win,&#10;            width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;            ori=0, pos=[posX-0.04, posY],&#10;            lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;            fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;            opacity=1,depth=stmdepth, &#10;            interpolate=True)&#10;        shp71.tStart = t&#10;        shp71.frameNStart = frameN&#10;        shp71.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp71)&#10;&#10;    shp72 = visual.Rect(win=win,&#10;        width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;        ori=0, pos=[posX, posY],&#10;        lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;        fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;        opacity=1,depth=stmdepth, &#10;        interpolate=True)&#10;    shp72.tStart = t&#10;    shp72.frameNStart = frameN&#10;    shp72.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp72)&#10;&#10;#   creating Stimuli-8&#10;#This Part decides the positioning of the stimuli based on its parity&#10;stmNum  = stmNum+1&#10;#--Assinging the center point for the stimuli.&#10;if stimuli[stmNum].cat == '1':&#10;    if inX &gt;0.5:&#10;        inX = -0.375&#10;        inY = 0.125&#10;    posX = inX&#10;    inX = inX+0.25&#10;    posY = inY&#10;else:&#10;    if outX &gt; 0.5:&#10;        outX = -0.375&#10;        outY = -0.375&#10;    posX = outX&#10;    outX = outX+0.25&#10;    posY = outY&#10;#This part draws the Oval&#10;oval8 = visual.Polygon(win=win,&#10;    edges = 100, size=ovalSize,&#10;    ori=0, pos=[posX, posY],&#10;    lineWidth=3, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;    fillColor=[1,1,1], fillColorSpace='rgb',&#10;    opacity=1,depth=stmdepth, &#10;    interpolate=True)&#10;oval8.setAutoDraw(True, log=None)&#10;stimuliList.append(oval8)&#10;#--This part draws the Triangles&#10;if stimuli[stmNum].s == 'triangle':&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp81 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;            pos=[posX-0.04, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;            ori = 0, depth=stmdepth)&#10;        shp81.tStart = t&#10;        shp81.frameNStart = frameN&#10;        shp81.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp81)&#10;&#10;    shp82 = visual.Polygon(win, edges=3, radius=1, size=[0.015,0.035], lineColor=[-1,-1,-1],&#10;        pos=[posX, posY], fillColor=stimuli[stmNum].c, lineWidth=2, autoLog=False,&#10;        ori = 0, depth=stmdepth)&#10;    shp82.tStart = t&#10;    shp82.frameNStart = frameN&#10;    shp82.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp82)&#10;&#10;else:&#10;#--This part draws the squares.&#10;    if stimuli[stmNum].n == '2': #--controls whether to show 2 elements or 1.&#10;        shp81 = visual.Rect(win=win,&#10;            width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;            ori=0, pos=[posX-0.04, posY],&#10;            lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;            fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;            opacity=1,depth=stmdepth,&#10;            interpolate=True)&#10;        shp81.tStart = t&#10;        shp81.frameNStart = frameN&#10;        shp81.setAutoDraw(True, log=None)&#10;        stimuliList.append(shp81)&#10;&#10;    shp82 = visual.Rect(win=win,&#10;        width=[0.025, 0.05][0], height=[0.025, 0.05][1],&#10;        ori=0, pos=[posX, posY],&#10;        lineWidth=2, lineColor=[-1,-1,-1], lineColorSpace='rgb',&#10;        fillColor=stimuli[stmNum].c, fillColorSpace='rgb',&#10;        opacity=1,depth=stmdepth,&#10;        interpolate=True)&#10;    shp82.tStart = t&#10;    shp82.frameNStart = frameN&#10;    shp82.setAutoDraw(True, log=None)&#10;    stimuliList.append(shp82)" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="#--This part will delete all the displayed elements at the end of the Routine&#10;for stmComp in stimuliList:&#10;    if hasattr(stmComp, &quot;setAutoDraw&quot;):&#10;        stmComp.setAutoDraw(False)" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
      <PolygonComponent name="topTitle">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="topTitle" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="stopVal" val="10" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0.55]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="4" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="size" val="[0.4, 0.1]" valType="code" updates="constant"/>
      </PolygonComponent>
      <TextComponent name="inCatText">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="inCatText" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="text" val="In Category" valType="str" updates="constant"/>
        <Param name="stopVal" val="10" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0.55]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>
      </TextComponent>
      <PolygonComponent name="bottomTitle">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="bottomTitle" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="stopVal" val="10" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, -0.55]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="4" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="size" val="[0.4, 0.1]" valType="code" updates="constant"/>
      </PolygonComponent>
      <TextComponent name="notinCatText">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="notinCatText" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="Black" valType="str" updates="constant"/>
        <Param name="text" val="Not In Category" valType="str" updates="constant"/>
        <Param name="stopVal" val="10" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, -0.54]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="trialmsg">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="trialmsg" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Test Number :" valType="str" updates="constant"/>
        <Param name="stopVal" val="10" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[-0.8, 0.85]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="trialNum">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="trialNum" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="$repeat.thisN+1&#10;" valType="str" updates="set every repeat"/>
        <Param name="stopVal" val="10" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[-0.8, 0.8]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
      </TextComponent>
      <StaticComponent name="ISI">
        <Param name="code" val="" valType="code" updates="None"/>
        <Param name="name" val="ISI" valType="code" updates="None"/>
        <Param name="stopVal" val="0.1" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="stopType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
      </StaticComponent>
      <PolygonComponent name="categories">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="categories" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="stopVal" val="10" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="4" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="size" val="[1, 1]" valType="code" updates="constant"/>
      </PolygonComponent>
      <PolygonComponent name="categorySeparator">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="categorySeparator" valType="code" updates="None"/>
        <Param name="fillColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="stopVal" val="10" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="4" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="2" valType="int" updates="constant"/>
        <Param name="size" val="[1, 1]" valType="code" updates="constant"/>
      </PolygonComponent>
    </Routine>
    <Routine name="blankSpace">
      <StaticComponent name="ISI_2">
        <Param name="code" val="" valType="code" updates="None"/>
        <Param name="name" val="ISI_2" valType="code" updates="None"/>
        <Param name="stopVal" val="0.250" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
      </StaticComponent>
    </Routine>
    <Routine name="instructPage">
      <TextComponent name="topLeft">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="topLeft" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Exp Information:&#10;1) Exp Name : Categorization" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[-0.8, 0.8]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="topRight">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="topRight" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="More Information:&#10;1) Info Line 1&#10;2) Info Line 2" valType="str" updates="constant"/>
        <Param name="stopVal" val="0.0" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0.8, 0.8]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.07" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="instructions">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="instructions" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="As part of this experiment you will be presented with 6 Categorization Plroblems.&#10;&#10;In Each problem, you will first be shown a collection of elements categorized as 'In Category' and 'Not In Category'.&#10;You will have 10 seconds to study this.&#10;&#10;Then you will be shown each element individually and you will need to answer if it was 'In Category' or 'Not In Category'.&#10;Press 'z' to answer 'in category' and press 'm' to answer 'not in Category'." valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.06" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="getContinue">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="getContinue" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Press 'Spacebar' to continue" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, -0.8]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.09" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="contInput">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="contInput" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'space'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="startPgCode">
        <Param name="Begin Experiment" val="# import the gui package in PsychoPy&#10;&#10;from psychopy import gui" valType="extendedCode" updates="constant"/>
        <Param name="name" val="startPgCode" valType="code" updates="None"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="nextTrial">
      <TextComponent name="contMsg">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="contMsg" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="Black" valType="str" updates="constant"/>
        <Param name="text" val="We will do one more category.&#10;Press any key when ready&#10;" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="$repeat.thisN &lt; 5" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.06" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="exitMsg">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="exitMsg" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="Black" valType="str" updates="constant"/>
        <Param name="text" val="Thank you !!&#10;You have completed the Experiment.&#10;Press any key to exit.&#10;" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="$repeat.thisN == 5" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.07" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="contKeyPress">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="contKeyPress" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trialtest">
      <CodeComponent name="code">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="code" valType="code" updates="None"/>
        <Param name="Begin Routine" val="#--The following variables control the display of elements during &#10;#--the testing phase of the experiment.&#10;&#10;#--This controls the shape to be dispalyed&#10;nvertices = 0&#10;if shape == 'square':&#10;    nvertices = 4&#10;else:&#10;    nvertices = 3&#10;&#10;temp = nvertices&#10;&#10;#--This controls the number of shapes in the element.&#10;if number == 2:&#10;    flag = 2&#10;if number == 3:&#10;    flag = 3&#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
      <TextComponent name="trialTestMsg">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="trialTestMsg" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Test Number :" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[-0.8, 0.85]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="trialTestNum">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="trialTestNum" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="$repeat.thisN+1" valType="str" updates="set every repeat"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[-0.8, 0.8]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
      </TextComponent>
      <PolygonComponent name="oval">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="oval" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0.3]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="3" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="100" valType="int" updates="constant"/>
        <Param name="size" val="[0.3, 0.2]" valType="code" updates="constant"/>
      </PolygonComponent>
      <PolygonComponent name="square1">
        <Param name="opacity" val="$number-1" valType="code" updates="set every repeat"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="square1" valType="code" updates="None"/>
        <Param name="fillColor" val="$stcolor" valType="str" updates="set every repeat"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[-0.05, 0.3]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="2" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="condition" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="condition" valType="str" updates="None"/>
        <Param name="startVal" val="$nvertices==4" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="size" val="[0.025, 0.05]" valType="code" updates="constant"/>
      </PolygonComponent>
      <PolygonComponent name="square2">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="square2" valType="code" updates="None"/>
        <Param name="fillColor" val="$stcolor" valType="str" updates="set every repeat"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0.3]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="2" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="condition" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="$nvertices==4" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="size" val="[0.025, 0.05]" valType="code" updates="constant"/>
      </PolygonComponent>
      <PolygonComponent name="triangle1">
        <Param name="opacity" val="$number-1" valType="code" updates="set every repeat"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="triangle1" valType="code" updates="None"/>
        <Param name="fillColor" val="$stcolor" valType="str" updates="set every repeat"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[-0.05, 0.3]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="2" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="condition" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="$nvertices==3" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="3" valType="int" updates="constant"/>
        <Param name="size" val="[0.025, 0.05]" valType="code" updates="constant"/>
      </PolygonComponent>
      <PolygonComponent name="triangle2">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="triangle2" valType="code" updates="None"/>
        <Param name="fillColor" val="$stcolor" valType="str" updates="set every repeat"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0.3]" valType="code" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineWidth" val="2" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="condition" valType="str" updates="None"/>
        <Param name="lineColor" val="$[-1,-1,-1]" valType="str" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="$nvertices==3" valType="code" updates="None"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="nVertices" val="3" valType="int" updates="constant"/>
        <Param name="size" val="[0.025, 0.05]" valType="code" updates="constant"/>
      </PolygonComponent>
      <TextComponent name="inputmsg">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="inputmsg" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Press 'z' to answer in category&#10;Press 'm' to answer out category" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, -0.6]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="correctAns" val="$corrAns" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_3" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'z','m'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructPage"/>
    <LoopInitiator loopType="TrialHandler" name="repeat">
      <Param name="conditionsFile" val="" valType="str" updates="None"/>
      <Param name="name" val="repeat" valType="code" updates="None"/>
      <Param name="isTrials" val="True" valType="bool" updates="None"/>
      <Param name="random seed" val="" valType="code" updates="None"/>
      <Param name="loopType" val="sequential" valType="str" updates="None"/>
      <Param name="nReps" val="6" valType="code" updates="None"/>
      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>
      <Param name="conditions" val="None" valType="str" updates="None"/>
      <Param name="Selected rows" val="" valType="str" updates="None"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="conditionsFile" val="stimuliList.xlsx" valType="str" updates="None"/>
      <Param name="name" val="trials" valType="code" updates="None"/>
      <Param name="isTrials" val="True" valType="bool" updates="None"/>
      <Param name="random seed" val="" valType="code" updates="None"/>
      <Param name="loopType" val="random" valType="str" updates="None"/>
      <Param name="nReps" val="1" valType="code" updates="None"/>
      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>
      <Param name="conditions" val="[{u'shape': u'square', u'inCategory': 0, u'number': 2, u'corrAns': u'm', u'stcolor': u'white'}, {u'shape': u'square', u'inCategory': 0, u'number': 1, u'corrAns': u'm', u'stcolor': u'black'}, {u'shape': u'square', u'inCategory': 0, u'number': 2, u'corrAns': u'm', u'stcolor': u'black'}, {u'shape': u'triangle', u'inCategory': 1, u'number': 2, u'corrAns': u'z', u'stcolor': u'white'}, {u'shape': u'triangle', u'inCategory': 0, u'number': 1, u'corrAns': u'm', u'stcolor': u'white'}, {u'shape': u'square', u'inCategory': 0, u'number': 1, u'corrAns': u'm', u'stcolor': u'white'}, {u'shape': u'triangle', u'inCategory': 0, u'number': 1, u'corrAns': u'm', u'stcolor': u'black'}, {u'shape': u'triangle', u'inCategory': 1, u'number': 2, u'corrAns': u'z', u'stcolor': u'black'}]" valType="str" updates="None"/>
      <Param name="Selected rows" val="" valType="str" updates="None"/>
    </LoopInitiator>
    <Routine name="trialtest"/>
    <Routine name="blankSpace"/>
    <LoopTerminator name="trials"/>
    <Routine name="nextTrial"/>
    <LoopTerminator name="repeat"/>
  </Flow>
</PsychoPy2experiment>
